/*
 * floorIndicatorBean.java
 *
 * Created on February 16, 2007, 1:24 PM
 */

package ess;

/**
 *
 * @author  Administrator
 */
public class floorIndicatorBean extends javax.swing.JPanel {
    
    /** Creates new form floorIndicatorBean */
    public floorIndicatorBean() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        indicator = new javax.swing.JLabel();
        direction = new javax.swing.JLabel();

        setLayout(null);

        indicator.setBackground(new java.awt.Color(0, 0, 0));
        indicator.setFont(new java.awt.Font("Tahoma", 1, 11));
        indicator.setForeground(new java.awt.Color(102, 255, 0));
        indicator.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        indicator.setOpaque(true);
        add(indicator);
        indicator.setBounds(0, 0, 70, 20);

        direction.setBackground(new java.awt.Color(51, 51, 51));
        direction.setFont(new java.awt.Font("Tahoma", 1, 11));
        direction.setForeground(new java.awt.Color(102, 255, 0));
        direction.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        direction.setOpaque(true);
        add(direction);
        direction.setBounds(70, 0, 50, 20);

    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel direction;
    private javax.swing.JLabel indicator;
    // End of variables declaration//GEN-END:variables

    /**
     * Holds value of property currentFloor.
     */
    private int currentFloor;
    

    /**
     * Getter for property currentFloor.
     * @return Value of property currentFloor.
     */
    public int getCurrentFloor() {
        return this.currentFloor;
        
    }

    /**
     * Setter for property currentFloor.
     * @param currentFloor New value of property currentFloor.
     */
    public void setCurrentFloor(int currentFloor) {
        this.currentFloor = currentFloor;
        indicator.setText(String.valueOf(currentFloor));
    }

    
    public void setEmergency()
    {
        indicator.setText("Emergency");
    }
    
    public void SetMessage(String msg)
    {
        indicator.setText(msg);
    }
    /**
     * Holds value of property elevatorDirection.
     */
    private boolean elevatorDirection;

    /**
     * Getter for property elevatorDirection.
     * @return Value of property elevatorDirection.
     */
    public boolean isElevatorDirection() {
        return this.elevatorDirection;
    }

    /**
     * Setter for property elevatorDirection.
     * @param elevatorDirection New value of property elevatorDirection.
     */
    public void setElevatorDirection(boolean elevatorDirection) {
        //True means move to down
        //false means move to up
        this.elevatorDirection = elevatorDirection;
        if (this.elevatorDirection==true)
        {
            direction.setText("[D]");
        }
        else
        {
            direction.setText("[U]");
        }
        }
        
    }
    

